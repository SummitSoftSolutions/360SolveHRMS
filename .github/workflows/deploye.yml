name: Deploy on Main Branch

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Local Windows Server
    runs-on: self-hosted

    defaults:
      run:
        shell: powershell

    steps:
      - name: Set dynamic environment variables
        id: setenv
        run: |
          $repoName = "${{ github.repository }}" -split '/' | Select-Object -Last 1
          echo "repo_name=$repoName" >> $env:GITHUB_OUTPUT
          echo "deploy_dir=D:\GitProjectsDeployment\Projects\$repoName" >> $env:GITHUB_OUTPUT
          echo "venv_dir=D:\GitProjectsDeployment\Projects\$repoName\venv" >> $env:GITHUB_OUTPUT
          echo "requirements_file=D:\GitProjectsDeployment\Projects\$repoName\requirements.txt" >> $env:GITHUB_OUTPUT
          echo "service_name=Service-${repoName}" >> $env:GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Sync project to deployment directory
        run: |
          Write-Host "Step 1: Syncing project files with robocopy..."
          robocopy "${{ github.workspace }}" "${{ steps.setenv.outputs.deploy_dir }}" /MIR
          $code = $LASTEXITCODE
          if ($code -ge 8) {
            throw "Robocopy failed with exit code $code"
          } else {
            Write-Host "Robocopy completed with exit code $code (success or minor issues)"
            exit 0
          }

      - name: Setup Python virtual environment and install dependencies
        run: |
          Write-Host "Step 2: Finding Python..."
          $PythonPath = (Get-Command python | Select-Object -ExpandProperty Source)
          if (-not (Test-Path $PythonPath)) {
            throw "Python not found in PATH."
          }

          Write-Host "Step 3: Checking/Creating Virtual Environment..."
          $VenvDir = "${{ steps.setenv.outputs.venv_dir }}"
          $VenvScripts = Join-Path $VenvDir "Scripts"
          $ActivatePath = Join-Path $VenvScripts "Activate.ps1"
          if (-not (Test-Path $ActivatePath)) {
            Write-Host "Virtual environment not found. Creating..."
            & $PythonPath -m venv $VenvDir
          } else {
            Write-Host "Virtual environment already exists."
          }

          Write-Host "Step 4: Activating virtual environment and installing requirements..."
          & "$VenvDir\Scripts\python.exe" -m pip install --upgrade pip
          & "$VenvDir\Scripts\pip.exe" install -r "${{ steps.setenv.outputs.requirements_file }}"

      - name: Run Django migrations
        run: |
          $PythonExe = Join-Path "${{ steps.setenv.outputs.venv_dir }}" "Scripts\python.exe"
          $ManagePy = Join-Path "${{ steps.setenv.outputs.deploy_dir }}" "manage.py"

          Write-Host "Step 5: Applying Django Migrations..."
          & $PythonExe $ManagePy makemigrations
          & $PythonExe $ManagePy migrate

      - name: Ensure Django service exists and restart
        run: |
          $ServiceName = "${{ steps.setenv.outputs.service_name }}"
          $PythonExe = Join-Path "${{ steps.setenv.outputs.venv_dir }}" "Scripts\python.exe"
          $ManagePy = Join-Path "${{ steps.setenv.outputs.deploy_dir }}" "manage.py"
          $AppDir = "${{ steps.setenv.outputs.deploy_dir }}"
          $Nssm = "D:\GitrepoDevServer\nssm\win64\nssm.exe"
          $HostPort = "${{ env.HOST_PORT }}"

          Write-Host "Step 6: Managing NSSM service..."
          $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue

          if (-not $service) {
              Write-Host "Service not found. Creating..."
              & $Nssm install $ServiceName $PythonExe $ManagePy runserver $HostPort
              & $Nssm set $ServiceName AppDirectory $AppDir
              & $Nssm start $ServiceName
          } else {
              Write-Host "Service exists. Restarting..."
              net stop $ServiceName
              net start $ServiceName
          }

    env:
      HOST_PORT: 192.168.0.160:7003
